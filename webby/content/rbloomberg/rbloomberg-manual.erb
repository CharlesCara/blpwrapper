---
title:      RBloomberg Manual
author:     Ana Nelson
created_at: 2009-01-30 13:08:32.468894 +00:00
dirty: true
filter:
  - erb
---

\tableofcontents

\section{About RBloomberg} % (fold)
\label{sec:about}

RBloomberg is an R package which handles fetching data from the Bloomberg financial data application. RBloomberg was written by Robert Sams, see the package README for additional contributors and acknowledgements. RBloomberg is released under a GPL open source license.

This documentation refers to RBloomberg version <%= r_project_version %>.

To download the latest version of this document, please visit the \href{http://findata.org/rbloomberg}{RBloomberg home page}.

% section about (end)

\section{Installation and Requirements} % (fold)
\label{sec:installation_and_requirements}

\subsection{Installation} % (fold)
\label{sub:installation}

RBloomberg will only work on a Bloomberg workstation. RBloomberg uses the Java Version 3 API, and depends on the rJava package. Java must also be installed.

To install RBloomberg:

\begin{verbatim}
  install.packages("RBloomberg", repos="http://r.findata.org")
\end{verbatim}

% subsection installation (end)

\subsection{Hello, World}

Once you have RBloomberg installed, load the library just like any other. The blpConnect() function initializes a connection to Bloomberg and returns a connection object which will be used in all subsequent calls. The bdp() function fetches a basic data call.
<%= gorgl("examples/hello-world.R") %>

The result of running these three commands should be something like this:
<%= gorgl("examples/hello-world.Rout") %>

\subsection{blpConnect}

<%= gorgl("../rbloomberg/R/blpConnect.R", "blpConnect-definition") %>

\section{Requesting Data}
\subsection{Reference Data} 

This section covers getting current, i.e. non-historical, data from Bloomberg. This may be live (or delayed as per your availability) market data, or static descriptive data. All such data is called using the bdp() function, as defined below:

<%= gorgl("../rbloomberg/R/blp.R", "bdp-definition") %>

<%= gorgl("examples/blp.Rout") %>

\subsection{Bulk Data}

Bulk data fields can return multiple fields and rows in response to a single requested field. Dividend history data (DVD\_HIST) and getting a list of members in an index (INDX\_MEMBERS) are examples of bulk data fields. If more than one security is requested, then the tickers are shown in the first column of the returned data frame. Multiple fields can be requested at a time if they return data with the same column names, for example INDX\_MEMBERS, INDX\_MEMBERS2 and INDX\_MEMBERS3.

<%= gorgl("../rbloomberg/R/blp.R", "bds-definition") %>

<%= gorgl("examples/bls.Rout") %>

\subsection{Historical Data}

For historical data, fetching a single security at a time is currently supported. Dates can be in string form using Bloomberg's YYYYMMDD format, or using any date/time class which responds to strftime. End dates are optional, if omitted all data from start time to current time will be requested.

If multiple securities are requested, then another column will be included containing the security ticker. If you wish to include this column when requesting a single security, which may be necessary if you don't know in advance whether your query will be for one or multiple securities, then pass \verb|always.display.tickers = TRUE|. By default, the dates will be used as row names unless multiple tickers are requested. To disable this, pass \verb|dates.as.row.names = FALSE|. Setting \verb|dates.as.row.names=TRUE| when requesting multiple tickers will result in an error.

<%= gorgl("../rbloomberg/R/blp.R", "bdh-definition") %>

<%= gorgl("examples/blh.Rout") %>

If you wish to have a data frame with tickers as row names and dates as column names, and data for a single field displayed in this grid, then see the example below using the \verb|as.matrix| method from the \verb|plm| library.

<%= gorgl("examples/plm.Rout") %>

\subsection{Tick Data}

<%= gorgl("../rbloomberg/R/blp.R", "tick-definition") %>

<%= gorgl("examples/tick.Rout") %>

\subsection{Bar Data}

<%= gorgl("../rbloomberg/R/blp.R", "bar-definition") %>

<%= gorgl("examples/bar.Rout") %>


\section{Overrides, Options, Tips and Tricks}
\subsection{Using Overrides}

The Bloomberg API allows you to make certain overrides to change the value that a function returns. We give a few examples here, to determine whether a field you wish to request can be overridden, consult the FLDS screen in your Bloomberg terminal (look for What Overrides Me).

Note that dates must be passed as strings in the form ``YYYYMMDD''. If you pass an invalid override field, or one that doesn't apply to the main field you are requesting, this will be silently ignored. So, make sure you know that your request is valid before you count on the returned value being correct. This is a feature rather than a bug since it makes it possible to specify override fields which only apply to 1 field requested. So, you can ask for CRNCY\_ADJ\_PX\_LAST and NAME in the same request, and you don't get an error saying that EQY\_FUND\_CRNCY doesn't apply to the NAME field.


\subsection{Setting Options}

The new Bloomberg API has per-request options. See Historical Data for an example of periodicitySelection.

All options need to be provided as strings, where necessary they will be converted to the correct data type within the Java code. The following named options will be converted to Datetime and Boolean types respectively, all other options will be sent to the Bloomberg API as strings. If you are aware of an option that should be converted to a different data type which is not on this list, please report this issue.

<%= gorgl("examples/options.Rout") %>

\subsection{Ignoring Ticker Errors}

By default, an error will be raised if you request data for an invalid ticker. If you would prefer to have NA values returned silently when you pass an invalid ticker, then connect to RBloomberg as follows:

<%= gorgl("examples/blp-no-errors.Rout") %>


\subsection{Field Lookup}

\section{Troubleshooting}

If you are having difficulty with RBloomberg, check the log files (located in your home directory, probably Documents and Settings/username) for possible error messages. Bloomberg creates its own very basic log files called blpjavaapi, and RBloomberg logs to org.findata.blpwrapper. You can make RBloomberg's logging much more verbose if you initialize it as follows:

<%= gorgl("examples/logging.Rout") %>

You might have a typo in your ticker or in the fields you are requesting, or the fields might not be applicable to the ticker. Try making the same request from within your Bloomberg terminal. The FLDS page gives you access to all the same fields from RBloomberg, so you can re-create the request you are trying to make (for one security at a time). You could also use the Excel API to double-check your request.

Also, check any override fields you are using.

